generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/voting?schema=public"
}






model User {
  id          Int       @id @default(autoincrement())
  email       String?   @unique
  password    String
  name        String
  phone       String?
  isAdmin     Boolean   @default(false)
  divisionId  Int?
  division    Division? @relation(fields: [divisionId], references: [id])
  username    String?   @unique // Логин пользователя
  meetings    Meeting[] @relation("MeetingParticipants")
  votes       Vote[]
  agendaItems AgendaItem[] @relation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isOnline    Boolean   @default(false) // Новое поле для статуса онлайн/оффлайн
  deviceLink  DeviceLink?  @relation // Добавляем связь с устройством
  televicExternalId String? @unique // Внешний ID делегата в Televic
  isBadgeInserted Boolean @default(false) // Статус карточки в Televic (воткнута/вынута)
  queueEntries Queue[] // Записи в очередях
}

model Division {
  id          Int       @id @default(autoincrement())
  name        String
  users       User[]
  meetings    Meeting[] @relation("MeetingDivisions")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Meeting {
  id          Int          @id @default(autoincrement())
  name        String
  startTime   DateTime
  endTime     DateTime
  status      MeetingStatus @default(WAITING)
  divisions   Division[]   @relation("MeetingDivisions")
  participants User[]       @relation("MeetingParticipants")
  agendaItems AgendaItem[]
  voteResults VoteResult[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isArchived  Boolean      @default(false)
  screenConfig Json?        // Конфигурации экранов (registration, agenda, voting, final)
  televicMeetingId Int?     // ID заседания в Televic CoCon (для зеркалирования)
  createInTelevic Boolean   @default(false) // Флаг для создания заседания в Televic при запуске
  showVoteOnBroadcast Boolean @default(false) // Флаг для отображения результата голосования на экране трансляции
  queues Queue[] // Очереди на вопрос/выступление
}

model AgendaItem {
  id          Int         @id @default(autoincrement())
  number      Int
  title       String
  speakerId   Int?
  speaker     User?       @relation(fields: [speakerId], references: [id])
  speakerName String?     // Имя докладчика (текстовое поле, если нет привязки к User)
  meetingId   Int
  meeting     Meeting     @relation(fields: [meetingId], references: [id])
  link        String?
  votes       Vote[]
  voteResults VoteResult[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  voting      Boolean     @default(false)
  completed   Boolean     @default(false)
  activeIssue Boolean     @default(false) // Поля показывает активный вопрос
}


model VoteResult {
  id            Int        @id @default(autoincrement())
  agendaItemId  Int
  agendaItem    AgendaItem @relation(fields: [agendaItemId], references: [id])
  meetingId     Int?
  meeting       Meeting?   @relation(fields: [meetingId], references: [id])
  question      String
  votesFor      Int        @default(0)
  votesAgainst  Int        @default(0)
  votesAbstain  Int        @default(0)
  votesAbsent   Int        @default(0)
  createdAt     DateTime   @default(now())
  duration      Int?
  voteStatus    String     @default("PENDING")
  votes         Vote[]     @relation("VoteToVoteResult") // Связь один-ко-многим с Vote

procedureId   Int?
  procedure     VoteProcedure? @relation("VoteProcedureToVoteResult", fields: [procedureId], references: [id])
  decision      String?   // Результат голосования: "Принято" или "Не принято"
voteType      VoteType?  @default(OPEN) // тип голосования открытое закрытое
  televicResultsPending Boolean @default(false) // Ожидание результатов от Televic CoCon (блокирует завершение)
}

model Vote {
  id          Int        @id @default(autoincrement())
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  agendaItemId Int
  agendaItem  AgendaItem @relation(fields: [agendaItemId], references: [id])
  voteResultId Int?        // Поле для связи с VoteResult
  voteResult  VoteResult? @relation(fields: [voteResultId], references: [id], name: "VoteToVoteResult")
  choice      VoteChoice
  createdAt   DateTime   @default(now())
}


model VoteProcedure {
  id           Int      @id @default(autoincrement())
  name         String
  conditions   Json
  resultIfTrue String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  voteResults  VoteResult[] @relation("VoteProcedureToVoteResult") // Добавленное поле
}


model VoteTemplate {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




model DeviceLink {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique // Один пользователь — один ID устройства (один-к-одному)
  user      User     @relation(fields: [userId], references: [id])
  deviceId  String   @unique // Уникальность ID устройства
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



enum MeetingStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
}

enum VoteChoice {
  FOR
  AGAINST
  ABSTAIN
}


enum VoteType {
  OPEN
  CLOSED
}

enum QueueType {
  QUESTION
  SPEECH
}

enum QueueStatus {
  WAITING
  ACTIVE
  COMPLETED
}

model Queue {
  id           Int         @id @default(autoincrement())
  meetingId    Int
  meeting      Meeting     @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  userId       Int
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         QueueType   // QUESTION или SPEECH
  status       QueueStatus @default(WAITING) // WAITING, ACTIVE, COMPLETED
  position     Int         // Позиция в очереди
  timerSeconds Int?        // Время таймера в секундах (из шаблона)
  timerEndTime DateTime?   // Время окончания таймера
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([meetingId, userId, type]) // Один пользователь не может быть дважды в одной очереди одного типа
  @@index([meetingId, type, status])
  @@index([meetingId, type, position])
}


enum ScreenType {
  REGISTRATION  // Экран регистрации (до начала заседания)
  AGENDA        // Экран активной повестки (во время заседания)
  VOTING        // Экран голосования (во время голосования)
  FINAL         // Финальный экран (итоги голосования)
}

model ScreenConfig {
  id        Int        @id @default(autoincrement())
  type      ScreenType @unique // Тип экрана
  config    Json       // Настройки интерфейса (JSON)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model DurationTemplate {
  id                Int      @id @default(autoincrement())
  name              String
  durationInSeconds Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
