const express = require('express');
const cors = require('cors');
const { createServer } = require('http');
const { Server } = require('socket.io');
const { Client } = require('pg');
const { PrismaClient } = require('@prisma/client');
const { randomUUID } = require('crypto');

const path = require('path');
const fs = require('fs');

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤.
 * @type {Object}
 */
const app = express();

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * @type {Object}
 */
const httpServer = createServer(app);

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket-—Å–µ—Ä–≤–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Socket.IO.
 * –ù–∞—Å—Ç—Ä–æ–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CORS –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
 * @type {Object}
 */
const allowedOrigins = [
  'http://217.114.10.226',
  'http://localhost:5173',
  'http://localhost:3000',
  'http://localhost:4173',
  'http://127.0.0.1:5173',
  'http://127.0.0.1:3000',
  'https://rms-bot.com',
  'http://rms-bot.com',
];

const io = new Server(httpServer, {
  cors: {
    origin: (origin, callback) => {
      if (!origin) return callback(null, true);
      if (allowedOrigins.includes(origin)) return callback(null, true);
      return callback(null, false);
    },
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true
  },
});

/**
 * –≠–∫–∑–µ–º–ø–ª—è—Ä PrismaClient –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Prisma ORM.
 * @type {Object}
 */
const prisma = new PrismaClient();

// Normalize stored vote procedures to the new "elements" format if they still
// use legacy { tokens, op } blocks. This keeps vote evaluation consistent and
// prevents runtime crashes inside the vote module.
async function normalizeVoteProcedures() {
  const toElements = (tokens = []) => {
    const out = [];
    for (let i = 0; i < tokens.length; i++) {
      const t = tokens[i];
      if (!t || typeof t !== 'object') continue;
      if (t.type === 'token') out.push(t.value);
      else if (t.type === 'number') out.push({ value: Number(t.number) || 0, type: 'input' });
      else if (t.type === 'percent') {
        out.push({ value: ((Number(t.number) || 0) / 100), type: 'input' });
        const next = tokens[i + 1];
        if (!next || !(next.type === 'token' && next.value === '*')) out.push('*');
      }
    }
    return out;
  };

  try {
    const all = await prisma.voteProcedure.findMany();
    for (const p of all) {
      if (!Array.isArray(p.conditions)) continue;
      let needsUpdate = false;
      const next = p.conditions.map((b) => {
        if (Array.isArray(b.elements)) return { elements: b.elements, operator: b.operator || b.op || null };
        if (Array.isArray(b.tokens)) { needsUpdate = true; return { elements: toElements(b.tokens), operator: b.operator || b.op || null }; }
        return { elements: [], operator: null };
      });
      if (needsUpdate) {
        await prisma.voteProcedure.update({ where: { id: p.id }, data: { conditions: next } });
      }
    }
  } catch (e) {
    console.error('Failed to normalize vote procedures:', e?.message || e);
  }
}

// Ensure the default system division exists
async function ensureSystemDivision() {
  try {
    // Check for any reserved name variation (–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ, üë•–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ, etc.)
    const isReservedName = (name) => {
      try {
        if (!name || typeof name !== 'string') return false;
        const n = name.replace(/üë•/g, '').trim().toLowerCase();
        return n === '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ';
      } catch {
        return false;
      }
    };

    const allDivisions = await prisma.division.findMany({ select: { id: true, name: true } });
    const sys = allDivisions.find((d) => isReservedName(d.name));

    if (sys) {
      // System division exists, ensure it has canonical name
      if (sys.name !== '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ') {
        await prisma.division.update({
          where: { id: sys.id },
          data: { name: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ' }
        });
        console.log(`Updated system division id=${sys.id} to canonical name '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ'`);
      }
    } else {
      // Create system division with canonical name
      await prisma.division.create({ data: { name: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ' } });
      console.log('Created system division with canonical name');
    }
  } catch (e) {
    console.error('Failed to ensure system division:', e?.message || e);
  }
}

// Ensure helper table for extra user divisions exists (for multi-group membership)
async function ensureUserExtraDivisionTable() {
  try {
    await prisma.$executeRawUnsafe(`
      CREATE TABLE IF NOT EXISTS "UserExtraDivision" (
        id SERIAL PRIMARY KEY,
        "userId" INT NOT NULL,
        "divisionId" INT NOT NULL,
        CONSTRAINT "UserExtraDivision_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT "UserExtraDivision_divisionId_fkey" FOREIGN KEY ("divisionId") REFERENCES "Division"("id") ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT "UserExtraDivision_unique" UNIQUE ("userId", "divisionId")
      );
    `);
  } catch (e) {
    console.error('Failed to ensure UserExtraDivision table:', e?.message || e);
  }
}

/**
 * –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä.
 * @type {Number}
 */
const port = process.env.PORT || 5000;

// Request logging middleware
/**
 * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤.
 * –í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É, –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –∏ URL.
 * @param {Object} req - –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞.
 * @param {Object} res - –û–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞.
 * @param {Function} next - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–º—É middleware.
 */
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});

// Global error guards so the server does not crash on async timer errors
process.on('unhandledRejection', (reason, p) => {
  try {
    const msg = reason && reason.stack ? reason.stack : String(reason);
    console.error('Unhandled promise rejection:', msg);
  } catch {}
});
process.on('uncaughtException', (err) => {
  try {
    const msg = err && err.stack ? err.stack : String(err);
    console.error('Uncaught exception:', msg);
  } catch {}
});

// Prisma middleware
/**
 * Middleware –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ PrismaClient –∫ –æ–±—ä–µ–∫—Ç—É –∑–∞–ø—Ä–æ—Å–∞.
 * –î–æ–±–∞–≤–ª—è–µ—Ç `req.prisma` –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö.
 * –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ Prisma.
 * @param {Object} req - –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞.
 * @param {Object} res - –û–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞.
 * @param {Function} next - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–º—É middleware.
 */
app.use((req, res, next) => {
  req.prisma = prisma;
  console.log('Prisma –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ –∑–∞–ø—Ä–æ—Å—É:', !!req.prisma);
  next();
});

// CORS configuration
/**
 * Middleware –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS (Cross-Origin Resource Sharing).
 * –†–∞–∑—Ä–µ—à–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (OPTIONS) —Å –∫–æ–¥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è 204.
 */
app.use(cors({
  origin: (origin, callback) => {
    if (!origin) return callback(null, true);
    if (allowedOrigins.includes(origin)) return callback(null, true);
    return callback(null, false);
  },
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
  preflightContinue: false,
  optionsSuccessStatus: 204
}));

/**
 * Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
 */
app.use(express.json());

// Normalize procedures in background on startup
(async () => {
  try { await normalizeVoteProcedures(); } catch {}
  try { await ensureSystemDivision(); } catch {}
  try { await ensureUserExtraDivisionTable(); } catch {}
})();

// PostgreSQL notifications
/**
 * –ö–ª–∏–µ–Ω—Ç PostgreSQL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã `voting`.
 * @type {Object}
 */
const pgClient = new Client({
  connectionString: 'postgresql://postgres:postgres@localhost:5432/voting',
});
pgClient.connect();

/**
 * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã PostgreSQL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 * –°–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã `vote_result_channel`, `meeting_status_channel`, `user_status_channel`.
 */
pgClient.query('LISTEN vote_result_channel');
pgClient.query('LISTEN meeting_status_channel');
pgClient.query('LISTEN user_status_channel');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π PostgreSQL.
 * –ü–∞—Ä—Å–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ `vote_result_channel`, `meeting_status_channel`, `user_status_channel`
 * –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ WebSocket-—Å–æ–±—ã—Ç–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
 * –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è.
 */
pgClient.on('notification', (msg) => {
  if (msg.channel === 'vote_result_channel') {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ PostgreSQL –¥–ª—è vote_result_channel:', msg.payload);
    const data = JSON.parse(msg.payload);
    if (data.voteStatus === 'PENDING') {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è new-vote-result:', data);
      // Safely convert createdAt to ISO string if present
      const payload = { ...data };
      if (data.createdAt) {
        try {
          payload.createdAt = new Date(data.createdAt).toISOString();
        } catch (e) {
          // If invalid date, use current time
          payload.createdAt = new Date().toISOString();
        }
      }
      io.emit('new-vote-result', payload);
    } else if (data.voteStatus === 'ENDED') {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è vote-ended:', data);
      io.emit('vote-ended', data);
      // Correct decision if all abstained or no YES/NO votes (do NOT send NOTIFY to avoid infinite loop)
      (async () => {
        try {
          const id = Number(data.id || data.voteResultId);
          if (Number.isFinite(id) && (Number(data.votesFor) === 0 && Number(data.votesAgainst) === 0) && (Number(data.votesAbstain) > 0 || Number(data.votesFor) + Number(data.votesAgainst) + Number(data.votesAbstain) === 0)) {
            await prisma.voteResult.update({ where: { id }, data: { decision: '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ' } });
            // DO NOT send NOTIFY here - it creates infinite loop!
          }
        } catch {}
      })();
      // Ensure agenda state reflects finished vote when ended by timer (only if not already completed)
      (async () => {
        try {
          const agendaItem = await prisma.agendaItem.findUnique({ where: { id: Number(data.agendaItemId) } });
          if (agendaItem && !agendaItem.completed) {
            await prisma.agendaItem.update({
              where: { id: Number(data.agendaItemId) },
              data: { completed: true, activeIssue: false, voting: false },
            });
            await pgClient.query(`NOTIFY meeting_status_channel, '${JSON.stringify({ id: Number(data.agendaItemId), meetingId: Number(data.meetingId), activeIssue: false, completed: true })}'`);
          }
        } catch (e) {
          console.error('Failed to mark agenda item completed on vote end:', e?.message || e);
        }
      })();
    } else if (data.voteStatus === 'APPLIED') {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è vote-applied:', data);
      io.emit('vote-applied', data);
    } else if (data.voteStatus === 'CANCELLED') {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è vote-cancelled:', data);
      io.emit('vote-cancelled', data);
    }
  } else if (msg.channel === 'meeting_status_channel') {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ PostgreSQL –¥–ª—è meeting_status_channel:', msg.payload);
    const data = JSON.parse(msg.payload);
    if (data.status) {
      io.emit('meeting-status-changed', data);
      if (data.status === 'COMPLETED') {
        io.emit('meeting-ended');
      }
    } else {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è agenda-item-updated:', data);
      io.emit('agenda-item-updated', {
        id: data.id,
        meetingId: data.meetingId,
        activeIssue: data.activeIssue,
        completed: data.completed
      });
    }
  } else if (msg.channel === 'user_status_channel') {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ PostgreSQL –¥–ª—è user_status_channel:', msg.payload);
    const data = JSON.parse(msg.payload);
    io.emit('user-status-changed', { userId: data.id, isOnline: data.isOnline });
  }
});

// Health check
/**
 * @api {get} /api/health –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
 * @apiName –ü—Ä–æ–≤–µ—Ä–∫–∞–°–æ—Å—Ç–æ—è–Ω–∏—è
 * @apiGroup –°–∏—Å—Ç–µ–º–∞
 * @apiDescription –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
 * @apiSuccess {Object} status –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞.
 * @apiSuccess {String} status.status –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ (`ok` –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç–µ).
 * @apiSuccessExample {json} –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
 *     {
 *         "status": "ok"
 *     }
 * @apiExample {curl} –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
 *     curl http://217.114.10.226:5000/api/health
 */
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok' });
});

// Routes
/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.
 * –ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–∏—Å—Ç–µ–º—ã (–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞—Å–µ–¥–∞–Ω–∏—è –∏ —Ç.–¥.).
 * –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã `prisma` –∏/–∏–ª–∏ `pgClient` –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º.
 */
app.use('/api/test', require(path.join(__dirname, 'root/test.cjs')));
app.use('/api', require('./root/auth.cjs'));
app.use('/api/users', require('./root/users.cjs')(prisma));
app.use('/api/divisions', require('./root/divisions.cjs'));
app.use('/api/meetings', require('./root/meetings.cjs')(prisma, pgClient, io));
app.use('/api/device-links', require('./root/device-links.cjs'));
app.use('/api-docs', require('./root/swagger.cjs'));
app.use('/api/users/excel', require('./root/excel.cjs'));
app.use('/api/meetings/excel', require('./root/meetings-excel.cjs'));
app.use('/api', require('./root/agenda-items.cjs')(prisma, pgClient, io));
app.use('/api', require('./root/vote-procedures.cjs')(prisma));
app.use('/api', require('./root/vote-templates.cjs')(prisma));
app.use('/api/duration-templates', require('./root/duration-templates.cjs'));
app.use('/api', require('./root/vote.cjs')(prisma, pgClient, io));
app.use('/api/televic', require('./root/televic.cjs')(prisma, pgClient, io));
app.use('/api/screen-configs', require('./root/screen-configs.cjs'));
app.use('/api/screen-uploads', require('./root/screen-uploads.cjs'));

// Serve uploaded files
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

// Manual end of vote for an agenda item
// Important: implemented here to avoid touching files in api/root
app.post('/api/vote-results/:agendaItemId/end', async (req, res) => {
  const { agendaItemId } = req.params;
  const agendaId = parseInt(agendaItemId, 10);
  if (!agendaId || Number.isNaN(agendaId)) {
    return res.status(400).json({ error: 'Invalid agendaItemId' });
  }

  // Helpers compatible with both old (tokens/op) and new (elements/operator) formats
  const tokensToElements = (tokens = []) => {
    const out = [];
    for (let i = 0; i < tokens.length; i++) {
      const t = tokens[i];
      if (!t || typeof t !== 'object') continue;
      if (t.type === 'token') {
        out.push(t.value);
      } else if (t.type === 'number') {
        out.push({ value: Number(t.number) || 0, type: 'input' });
      } else if (t.type === 'percent') {
        out.push({ value: ((Number(t.number) || 0) / 100), type: 'input' });
        const next = tokens[i + 1];
        if (!next || !(next.type === 'token' && next.value === '*')) {
          out.push('*');
        }
      }
    }
    return out;
  };

  // Maps a selector token to a numeric value from context
  const valueFromToken = (value, type, ctx) => {
    if (type === 'input') return Number(value) || 0;
    if (!value || typeof value !== 'string') return 0;

    const v = value.toLowerCase();
    // Heuristic mapping tolerant to wording
    if (/(–æ–±—â|–≤—Å[–µ—ë]–≥–æ).*(—É—á–∞—Å—Ç)/.test(v) && !/(–æ–Ω–ª–∞–π–Ω|on ?line)/.test(v)) return ctx.totalParticipants;
    if (/(–æ–Ω–ª–∞–π–Ω|on ?line)/.test(v)) return ctx.totalOnlineParticipants;
    if (/(–≤—Å[–µ—ë]–≥–æ).*(–≥–æ–ª–æ—Å)/.test(v)) return ctx.totalVotes;
    if (/\b–∑–∞\b/.test(v)) return ctx.votesFor;
    if (/(–ø—Ä–æ—Ç–∏–≤)/.test(v)) return ctx.votesAgainst;
    if (/(–≤–æ–∑–¥–µ—Ä–∂)/.test(v)) return ctx.votesAbstain;
    if (/(–æ—Ç—Å—É—Ç—Å—Ç–≤)/.test(v)) return ctx.votesAbsent;
    return 0;
  };

  const evaluateElements = (elements, ctx) => {
    if (!Array.isArray(elements)) return false;
    const stack = [];
    const ops = [];

    const precedence = (op) => {
      switch (op) {
        case '*': case '/': return 3;
        case '+': case '-': return 2;
        case '>': case '<': case '>=': case '<=': case '=': return 1;
        case 'AND': case 'OR': case 'XOR': case 'ANDNOT': return 0;
        default: return -1;
      }
    };

    const applyOp = (op) => {
      const b = stack.pop();
      const a = stack.pop();
      switch (op) {
        case '*': stack.push(a * b); break;
        case '+': stack.push(a + b); break;
        case '-': stack.push(a - b); break;
        case '/': stack.push(b === 0 ? 0 : a / b); break;
        case '>': stack.push(a > b); break;
        case '>=': stack.push(a >= b); break;
        case '<': stack.push(a < b); break;
        case '<=': stack.push(a <= b); break;
        case '=': stack.push(a == b); break; // intentional loose equality, mirrors current logic
        case 'AND': stack.push(Boolean(a) && Boolean(b)); break;
        case 'OR': stack.push(Boolean(a) || Boolean(b)); break;
        case 'XOR': stack.push(Boolean(a) !== Boolean(b)); break;
        case 'ANDNOT': stack.push(Boolean(a) && !Boolean(b)); break;
        default: break;
      }
    };

    const norm = (token) => {
      if (typeof token !== 'string') return token;
      const t = token.trim().toUpperCase();
      if (t === '–ò') return 'AND';
      if (t === '–ò–õ–ò') return 'OR';
      if (t === 'XOR' || t === '–ò–°–õ–ò') return 'XOR';
      if (t === '–ò-–ù–ï' || t === 'ANDNOT') return 'ANDNOT';
      return token;
    };

    for (let i = 0; i < elements.length; i++) {
      const el = elements[i];
      const v = typeof el === 'string' ? norm(el) : el.value;
      const t = typeof el === 'string' ? 'select' : el.type;

      if (v === '(') {
        ops.push(v);
      } else if (v === ')') {
        while (ops.length && ops[ops.length - 1] !== '(') applyOp(ops.pop());
        if (ops[ops.length - 1] === '(') ops.pop();
      } else if (['*','+','-','/','>','<','>=','<=','=','AND','OR','XOR','ANDNOT'].includes(v)) {
        while (ops.length && precedence(ops[ops.length - 1]) >= precedence(v)) applyOp(ops.pop());
        ops.push(v);
      } else {
        stack.push(valueFromToken(v, t, ctx));
      }
    }
    while (ops.length) applyOp(ops.pop());
    return Boolean(stack.pop());
  };

  try {
    // Find the latest vote result for this agenda item
    const finalVoteResult = await prisma.voteResult.findFirst({
      where: { agendaItemId: agendaId },
      orderBy: { createdAt: 'desc' },
      include: { meeting: { include: { divisions: true } } },
    });
    if (!finalVoteResult) return res.status(404).json({ error: 'Vote result not found' });

    // Gather votes and participants
    const votes = await prisma.vote.findMany({ where: { agendaItemId: agendaId } });
    const votedUserIds = [...new Set(votes.map(v => v.userId))];

    const participants = await prisma.user.findMany({
      where: {
        divisionId: { in: finalVoteResult.meeting.divisions ? finalVoteResult.meeting.divisions.map(d => d.id) : [] },
        isAdmin: false,
      },
    });

    let notVotedCount = 0;
    for (const p of participants) if (!votedUserIds.includes(p.id)) notVotedCount += 1;

    const ctx = {
      totalParticipants: participants.length,
      totalOnlineParticipants: await prisma.user.count({ where: { divisionId: { in: finalVoteResult.meeting.divisions ? finalVoteResult.meeting.divisions.map(d => d.id) : [] }, isAdmin: false, isOnline: true } }),
      totalVotes: (finalVoteResult.votesFor + finalVoteResult.votesAgainst + finalVoteResult.votesAbstain),
      votesFor: finalVoteResult.votesFor,
      votesAgainst: finalVoteResult.votesAgainst,
      votesAbstain: finalVoteResult.votesAbstain,
      votesAbsent: notVotedCount,
    };

    // Load procedure and evaluate with backward compatibility
    const procedure = await prisma.voteProcedure.findUnique({ where: { id: finalVoteResult.procedureId } });
    let decision = null;

    // Hard safety: if –≤—Å–µ –≤–æ–∑–¥–µ—Ä–∂–∞–ª–∏—Å—å –∏–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ ¬´–∑–∞/–ø—Ä–æ—Ç–∏–≤¬ª ‚Äî —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ
    if ((finalVoteResult.votesFor === 0 && finalVoteResult.votesAgainst === 0) && (finalVoteResult.votesAbstain > 0 || ctx.totalVotes === 0)) {
      decision = '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ';
    }
    if (procedure && Array.isArray(procedure.conditions) && procedure.conditions.length) {
      const blocks = procedure.conditions.map((b) => {
        if (Array.isArray(b.elements)) return { elements: b.elements, operator: b.operator || b.op || null };
        if (Array.isArray(b.tokens)) return { elements: tokensToElements(b.tokens), operator: b.operator || b.op || null };
        return { elements: [], operator: null };
      });
      let final = null;
      for (let i = 0; i < blocks.length; i++) {
        const cur = evaluateElements(blocks[i].elements, ctx);
        if (i === 0) final = cur;
        else {
          const prevOp = (blocks[i - 1].operator || 'AND').toString().toUpperCase();
          if (prevOp === 'AND' || prevOp === '–ò') final = final && cur;
          else if (prevOp === 'OR' || prevOp === '–ò–õ–ò') final = final || cur;
          else if (prevOp === 'XOR') final = Boolean(final) !== Boolean(cur);
          else if (prevOp === 'ANDNOT' || prevOp === '–ò-–ù–ï') final = Boolean(final) && !Boolean(cur);
          else final = final && cur;
        }
      }
      const positive = Boolean(final);
      const trueText = procedure.resultIfTrue || '–ü—Ä–∏–Ω—è—Ç–æ';
      decision = positive ? trueText : (trueText === '–ü—Ä–∏–Ω—è—Ç–æ' ? '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ' : '–ü—Ä–∏–Ω—è—Ç–æ');
    } else {
      // Fallback: simple majority if no conditions
      if (!decision) {
        decision = finalVoteResult.votesFor > finalVoteResult.votesAgainst ? '–ü—Ä–∏–Ω—è—Ç–æ' : '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ';
      }
    }

    const updatedVoteResult = await prisma.voteResult.update({
      where: { id: finalVoteResult.id },
      data: { voteStatus: 'ENDED', votesAbsent: notVotedCount, decision },
    });

    await prisma.agendaItem.update({ where: { id: agendaId }, data: { voting: false, activeIssue: false, completed: true } });

    // Broadcast agenda item state change to connected clients
    try {
      await pgClient.query(`NOTIFY meeting_status_channel, '${JSON.stringify({ id: agendaId, meetingId: finalVoteResult.meetingId, activeIssue: false, completed: true })}'`);
    } catch {}

    const payload = { ...updatedVoteResult, createdAt: updatedVoteResult.createdAt instanceof Date ? updatedVoteResult.createdAt.toISOString() : updatedVoteResult.createdAt };
    await pgClient.query(`NOTIFY vote_result_channel, '${JSON.stringify(payload)}'`);

    res.json({ success: true, voteResult: updatedVoteResult });
  } catch (error) {
    console.error('Error finishing vote:', error);
    res.status(500).json({ error: error.message });
  }
});

// WebSocket connection
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ WebSocket —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Socket.IO.
 * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
 */
io.on('connection', (socket) => {
  console.log('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);
  socket.on('disconnect', (reason) => {
    console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id, '–ü—Ä–∏—á–∏–Ω–∞:', reason);
  });
});

// =============================
// Socket.IO: CoCon connector NS
// =============================
const connectors = new Map(); // socket.id -> { connectorId, topic, roomId, lastHello, hello }
const pendingCommands = new Map(); // id -> { resolve, reject, timer }

const coconNS = io.of('/cocon-connector');

coconNS.on('connection', (socket) => {
  const { connectorId, topic, roomId, token } = socket.handshake?.auth || {};
  connectors.set(socket.id, {
    connectorId: connectorId || null,
    topic: topic || 'default-topic',
    roomId: roomId || null,
    lastHello: null,
    hello: null,
  });
  console.log('[cocon] connection', socket.id, { connectorId, topic, roomId });

  socket.on('connector:hello', (data) => {
    const entry = connectors.get(socket.id);
    if (entry) {
      entry.lastHello = new Date().toISOString();
      entry.hello = data || {};
      connectors.set(socket.id, entry);
    }
    socket.emit('connector:hello:ack', { ts: Date.now(), sessionId: socket.id });
    console.log('[cocon] hello', socket.id, data && data.connectorId);
  });

  socket.on('connector:command:ack', (msg) => {
    console.log('[cocon] ack', socket.id, msg);
  });

  socket.on('connector:command:result', (msg) => {
    console.log('[cocon] result', socket.id, msg && msg.id, msg && msg.ok);
    if (msg && msg.id && pendingCommands.has(msg.id)) {
      const entry = pendingCommands.get(msg.id);
      clearTimeout(entry.timer);
      pendingCommands.delete(msg.id);
      entry.resolve(msg);
    }
  });

  socket.on('connector:event', async (evt) => {
    try {
      if (!evt || !evt.type) return;
      if (evt.type === 'vote-cast') {
        await require('axios').post(`http://127.0.0.1:${port}/api/vote-by-result`, {
          userId: evt.userId,
          voteResultId: evt.voteResultId,
          choice: evt.choice,
        });
      } else if (evt.type === 'BadgeEvent') {
        // Handle BadgeEvent from connector
        const { delegateId, badgeInserted } = evt.data || {};

        if (delegateId === undefined) return;

        console.log(`[BadgeEvent] Delegate ${delegateId}: badge ${badgeInserted ? 'inserted' : 'removed'}`);

        // Find user by televicExternalId
        const user = await prisma.user.findUnique({
          where: { televicExternalId: String(delegateId) }
        });

        if (!user) {
          console.log(`[BadgeEvent] No user found with televicExternalId=${delegateId}`);
          return;
        }

        // Update user badge status in database
        await prisma.user.update({
          where: { id: user.id },
          data: { isBadgeInserted: badgeInserted }
        });

        console.log(`[BadgeEvent] User ${user.name} (id=${user.id}): badge ${badgeInserted ? 'inserted' : 'removed'}`);

        // Emit to all connected clients
        io.emit('badge-status-changed', {
          userId: user.id,
          isBadgeInserted: badgeInserted
        });
      }
    } catch (e) {
      console.error('[cocon] connector:event error', e.message);
    }
  });

  // Handle logs from connector
  socket.on('connector:log', (data) => {
    const { timestamp, message } = data || {};
    console.log(`[CONNECTOR] ${timestamp} ${message}`);
  });

  // Handle voting results from CoCon pults
  socket.on('connector:voting:results', async (data) => {
    try {
      console.log('[VotingResults] Received voting results from connector:', JSON.stringify(data, null, 2));

      const { votes, aggregated, agendaSequence, timestamp } = data || {};

      const hasIndividualVotes = votes && Array.isArray(votes) && votes.length > 0;
      const hasAggregatedResults = aggregated && aggregated.totalVotes > 0;

      if (!hasIndividualVotes && !hasAggregatedResults) {
        console.log('[VotingResults] No votes to process (neither individual nor aggregated)');
        return;
      }

      if (hasIndividualVotes) {
        console.log(`[VotingResults] Processing ${votes.length} individual votes for agenda sequence ${agendaSequence}`);
      }
      if (hasAggregatedResults) {
        console.log(`[VotingResults] Processing aggregated results: FOR=${aggregated.votesFor}, AGAINST=${aggregated.votesAgainst}, ABSTAIN=${aggregated.votesAbstain}`);
      }

      // Find latest vote result in active CoCon-enabled meeting
      // Don't filter by voteStatus - results may arrive after voting was applied/ended
      // Just find the most recent VoteResult in any meeting with televicMeetingId
      const activeVoteResult = await prisma.voteResult.findFirst({
        where: {
          meeting: {
            televicMeetingId: { not: null },
            status: { in: ['WAITING', 'IN_PROGRESS'] } // Only active meetings
          }
        },
        orderBy: { createdAt: 'desc' }, // Most recent vote result
        include: {
          agendaItem: true,
          meeting: true
        }
      });

      if (!activeVoteResult) {
        console.log('[VotingResults] No vote result found in active CoCon-enabled meeting');
        return;
      }

      console.log(`[VotingResults] Found active vote result: id=${activeVoteResult.id}, agendaItemId=${activeVoteResult.agendaItemId}`);

      // Process votes: either individual or aggregated
      let successCount = 0;
      let errorCount = 0;
      let votesFor, votesAgainst, votesAbstain;

      if (hasIndividualVotes) {
        // Process individual votes
        for (const vote of votes) {
        try {
          const { delegateId, choice, seatNumber } = vote;

          // Find user by televicExternalId
          const user = await prisma.user.findUnique({
            where: { televicExternalId: String(delegateId) }
          });

          if (!user) {
            console.log(`[VotingResults] No user found for delegateId=${delegateId}`);
            errorCount++;
            continue;
          }

          // Map choice to VoteChoice enum
          let voteChoice;
          if (choice === 'FOR') voteChoice = 'FOR';
          else if (choice === 'AGAINST') voteChoice = 'AGAINST';
          else if (choice === 'ABSTAIN') voteChoice = 'ABSTAIN';
          else {
            console.log(`[VotingResults] Unknown choice: ${choice}`);
            errorCount++;
            continue;
          }

          // Check if vote already exists
          const existingVote = await prisma.vote.findFirst({
            where: {
              userId: user.id,
              agendaItemId: activeVoteResult.agendaItemId,
              voteResultId: activeVoteResult.id
            }
          });

          if (existingVote) {
            // Update existing vote
            await prisma.vote.update({
              where: { id: existingVote.id },
              data: { choice: voteChoice }
            });
            console.log(`[VotingResults] Updated vote: user=${user.name} (${user.id}), choice=${voteChoice}`);
          } else {
            // Create new vote
            await prisma.vote.create({
              data: {
                userId: user.id,
                agendaItemId: activeVoteResult.agendaItemId,
                voteResultId: activeVoteResult.id,
                choice: voteChoice
              }
            });
            console.log(`[VotingResults] Created vote: user=${user.name} (${user.id}), choice=${voteChoice}`);
          }

          successCount++;
        } catch (voteError) {
          console.error(`[VotingResults] Error processing vote:`, voteError.message);
          errorCount++;
        }
        }

        // Calculate counters from individual votes
        const allVotes = await prisma.vote.findMany({
          where: { voteResultId: activeVoteResult.id }
        });

        votesFor = allVotes.filter(v => v.choice === 'FOR').length;
        votesAgainst = allVotes.filter(v => v.choice === 'AGAINST').length;
        votesAbstain = allVotes.filter(v => v.choice === 'ABSTAIN').length;

        console.log(`[VotingResults] ‚úÖ Processed ${successCount} individual votes, ${errorCount} errors`);
      } else if (hasAggregatedResults) {
        // Use aggregated results directly (no individual vote records)
        votesFor = aggregated.votesFor || 0;
        votesAgainst = aggregated.votesAgainst || 0;
        votesAbstain = aggregated.votesAbstain || 0;

        console.log(`[VotingResults] ‚úÖ Using aggregated results: FOR=${votesFor}, AGAINST=${votesAgainst}, ABSTAIN=${votesAbstain}`);
      }

      const updatedVoteResult = await prisma.voteResult.update({
        where: { id: activeVoteResult.id },
        data: {
          votesFor,
          votesAgainst,
          votesAbstain,
          // IMPORTANT: Clear televicResultsPending flag when results arrive from connector
          // This unblocks the "Finish" button on the frontend
          televicResultsPending: false
        }
      });

      console.log(`[VotingResults] Updated counters: FOR=${votesFor}, AGAINST=${votesAgainst}, ABSTAIN=${votesAbstain}`);

      // Send NOTIFY to update clients
      const payload = {
        id: activeVoteResult.id,
        votesFor,
        votesAgainst,
        votesAbstain,
        voteStatus: 'PENDING',
        createdAt: updatedVoteResult.createdAt instanceof Date ? updatedVoteResult.createdAt.toISOString() : updatedVoteResult.createdAt
      };
      await pgClient.query(`NOTIFY vote_result_channel, '${JSON.stringify(payload)}'`);

      // REAL-TIME UPDATE: Emit to all connected clients for live vote tracking
      io.emit('vote-result-updated', {
        voteResultId: activeVoteResult.id,
        agendaItemId: activeVoteResult.agendaItemId,
        meetingId: activeVoteResult.meetingId,
        votesFor,
        votesAgainst,
        votesAbstain,
        totalVotes: votesFor + votesAgainst + votesAbstain,
        timestamp: new Date().toISOString()
      });

      console.log(`[VotingResults] ‚úÖ Emitted real-time update: vote-result-updated`);
    } catch (e) {
      console.error('[VotingResults] Error:', e.message);
    }
  });

  socket.on('disconnect', (reason) => {
    console.log('[cocon] disconnect', socket.id, reason);
    connectors.delete(socket.id);
  });
});

// HTTP endpoint to inspect current connector sessions
app.get('/api/connectors', (req, res) => {
  const list = [];
  connectors.forEach((v, k) => list.push({ socketId: k, ...v }));
  res.json({ count: list.length, items: list });
});

function findConnectorSocket({ topic, roomId }) {
  for (const [sid, info] of connectors.entries()) {
    if ((topic ? info.topic === topic : true) && (roomId ? String(info.roomId) === String(roomId) : true)) {
      const s = coconNS.sockets.get(sid);
      if (s) return s;
    }
  }
  for (const [sid] of connectors.entries()) {
    const s = coconNS.sockets.get(sid);
    if (s) return s;
  }
  return null;
}

function dispatchCommand(socket, { type, payload, timeoutMs = 10000 }) {
  return new Promise((resolve, reject) => {
    const id = randomUUID();
    const timer = setTimeout(() => {
      pendingCommands.delete(id);
      reject(new Error('Command timeout'));
    }, timeoutMs);
    pendingCommands.set(id, { resolve, reject, timer });
    socket.emit('server:command:exec', { id, type, payload, timeoutMs });
  });
}

// Bridge endpoints for Televic CoCon
app.get('/api/coconagenda/GetAllDelegates', async (req, res) => {
  try {
    const topic = req.query.topic || undefined;
    const roomId = req.query.roomId || undefined;
    const sock = findConnectorSocket({ topic, roomId });
    if (!sock) return res.status(503).json({ error: 'No connector online' });
    const result = await dispatchCommand(sock, { type: 'GetAllDelegates', payload: {} });
    if (result && result.ok) return res.json(result.data || []);
    return res.status(502).json({ error: result && result.error || 'Connector returned error' });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

app.get('/api/coconagenda/GetDelegatesOnSeats', async (req, res) => {
  try {
    const topic = req.query.topic || undefined;
    const roomId = req.query.roomId || undefined;
    const sock = findConnectorSocket({ topic, roomId });
    if (!sock) return res.status(503).json({ error: 'No connector online' });
    const result = await dispatchCommand(sock, { type: 'GetDelegatesOnSeats', payload: {} });
    if (result && result.ok) return res.json(result.data || []);
    return res.status(502).json({ error: result && result.error || 'Connector returned error' });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

// Static documentation
/**
 * –ü–æ–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API –∏–∑ –ø–∞–ø–∫–∏ `../doc`.
 * –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å.
 * –î–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –ø—É—Ç–∏ `/docs`.
 */
const docPath = path.join(__dirname, '../doc');
if (fs.existsSync(docPath)) {
  app.use('/docs', express.static(docPath));
} else {
  console.error(`–ü–∞–ø–∫–∞ ${docPath} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
}

// Start server
/**
 * –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É.
 * –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ.
 */
httpServer.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});
